buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
			classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE')
			classpath ('org.junit.platform:junit-platform-gradle-plugin:1.0.1')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
	mavenCentral()
}
repositories {
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

dependencies {
  compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-test-autoconfigure:1.4.0.RELEASE'

  testCompile 'org.springframework.boot:spring-boot-starter-web'
	testCompile('org.springframework.boot:spring-boot-starter-test:1.3.5.RELEASE')

	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
	testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.1.0-M2'

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.1.0-M2'

	// for Hamcrest matching
	testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def getHost() {
	def inetAddr = new InetAddress()
	def hostName = inetAddr.getHostName()
	return hostName
}

tasks.build.doLast{
	tasks.zip_test
}

task (zip_test, type: Zip ) {
	dependsOn 'build'
	mustRunAfter 'build'
	from 'test'
	baseName = 'build'
	appendix = getDate()
	extension = 'zip'
	destinationDir = project.projectDir
}
